{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Input, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { Observable, Subject } from 'rxjs';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n\nclass NzResizeObserverFactory {\n  create(callback) {\n    return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n  }\n\n}\n\nNzResizeObserverFactory.ɵfac = function NzResizeObserverFactory_Factory(t) {\n  return new (t || NzResizeObserverFactory)();\n};\n\nNzResizeObserverFactory.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NzResizeObserverFactory,\n  factory: NzResizeObserverFactory.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzResizeObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/** An injectable service that allows watching elements for changes to their content. */\n\n\nclass NzResizeObserver {\n  constructor(nzResizeObserverFactory) {\n    this.nzResizeObserverFactory = nzResizeObserverFactory;\n    /** Keeps track of the existing ResizeObservers so they can be reused. */\n\n    this.observedElements = new Map();\n  }\n\n  ngOnDestroy() {\n    this.observedElements.forEach((_, element) => this.cleanupObserver(element));\n  }\n\n  observe(elementOrRef) {\n    const element = coerceElement(elementOrRef);\n    return new Observable(observer => {\n      const stream = this.observeElement(element);\n      const subscription = stream.subscribe(observer);\n      return () => {\n        subscription.unsubscribe();\n        this.unobserveElement(element);\n      };\n    });\n  }\n  /**\n   * Observes the given element by using the existing ResizeObserver if available, or creating a\n   * new one if not.\n   */\n\n\n  observeElement(element) {\n    if (!this.observedElements.has(element)) {\n      const stream = new Subject();\n      const observer = this.nzResizeObserverFactory.create(mutations => stream.next(mutations));\n\n      if (observer) {\n        observer.observe(element);\n      }\n\n      this.observedElements.set(element, {\n        observer,\n        stream,\n        count: 1\n      });\n    } else {\n      this.observedElements.get(element).count++;\n    }\n\n    return this.observedElements.get(element).stream;\n  }\n  /**\n   * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n   * observing this element.\n   */\n\n\n  unobserveElement(element) {\n    if (this.observedElements.has(element)) {\n      this.observedElements.get(element).count--;\n\n      if (!this.observedElements.get(element).count) {\n        this.cleanupObserver(element);\n      }\n    }\n  }\n  /** Clean up the underlying ResizeObserver for the specified element. */\n\n\n  cleanupObserver(element) {\n    if (this.observedElements.has(element)) {\n      const {\n        observer,\n        stream\n      } = this.observedElements.get(element);\n\n      if (observer) {\n        observer.disconnect();\n      }\n\n      stream.complete();\n      this.observedElements.delete(element);\n    }\n  }\n\n}\n\nNzResizeObserver.ɵfac = function NzResizeObserver_Factory(t) {\n  return new (t || NzResizeObserver)(i0.ɵɵinject(NzResizeObserverFactory));\n};\n\nNzResizeObserver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NzResizeObserver,\n  factory: NzResizeObserver.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzResizeObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NzResizeObserverFactory\n    }];\n  }, null);\n})();\n\nclass NzResizeObserverDirective {\n  constructor(nzResizeObserver, elementRef) {\n    this.nzResizeObserver = nzResizeObserver;\n    this.elementRef = elementRef;\n    this.nzResizeObserve = new EventEmitter();\n    this.nzResizeObserverDisabled = false;\n    this.currentSubscription = null;\n  }\n\n  subscribe() {\n    this.unsubscribe();\n    this.currentSubscription = this.nzResizeObserver.observe(this.elementRef).subscribe(this.nzResizeObserve);\n  }\n\n  unsubscribe() {\n    var _a;\n\n    (_a = this.currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    if (!this.currentSubscription && !this.nzResizeObserverDisabled) {\n      this.subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe();\n  }\n\n  ngOnChanges(changes) {\n    const {\n      nzResizeObserve\n    } = changes;\n\n    if (nzResizeObserve) {\n      if (this.nzResizeObserverDisabled) {\n        this.unsubscribe();\n      } else {\n        this.subscribe();\n      }\n    }\n  }\n\n}\n\nNzResizeObserverDirective.ɵfac = function NzResizeObserverDirective_Factory(t) {\n  return new (t || NzResizeObserverDirective)(i0.ɵɵdirectiveInject(NzResizeObserver), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nNzResizeObserverDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzResizeObserverDirective,\n  selectors: [[\"\", \"nzResizeObserver\", \"\"]],\n  inputs: {\n    nzResizeObserverDisabled: \"nzResizeObserverDisabled\"\n  },\n  outputs: {\n    nzResizeObserve: \"nzResizeObserve\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n__decorate([InputBoolean()], NzResizeObserverDirective.prototype, \"nzResizeObserverDisabled\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzResizeObserverDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzResizeObserver]'\n    }]\n  }], function () {\n    return [{\n      type: NzResizeObserver\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    nzResizeObserve: [{\n      type: Output\n    }],\n    nzResizeObserverDisabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzResizeObserverModule {}\n\nNzResizeObserverModule.ɵfac = function NzResizeObserverModule_Factory(t) {\n  return new (t || NzResizeObserverModule)();\n};\n\nNzResizeObserverModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzResizeObserverModule\n});\nNzResizeObserverModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [NzResizeObserverFactory]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzResizeObserverModule, [{\n    type: NgModule,\n    args: [{\n      providers: [NzResizeObserverFactory],\n      declarations: [NzResizeObserverDirective],\n      exports: [NzResizeObserverDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzResizeObserver, NzResizeObserverDirective, NzResizeObserverFactory, NzResizeObserverModule };","map":{"version":3,"sources":["/home/ofgha/Documents/PL2/front-end/node_modules/ng-zorro-antd/fesm2015/ng-zorro-antd-cdk-resize-observer.mjs"],"names":["i0","Injectable","EventEmitter","Directive","Output","Input","NgModule","__decorate","InputBoolean","coerceElement","Observable","Subject","NzResizeObserverFactory","create","callback","ResizeObserver","ɵfac","ɵprov","type","args","providedIn","NzResizeObserver","constructor","nzResizeObserverFactory","observedElements","Map","ngOnDestroy","forEach","_","element","cleanupObserver","observe","elementOrRef","observer","stream","observeElement","subscription","subscribe","unsubscribe","unobserveElement","has","mutations","next","set","count","get","disconnect","complete","delete","NzResizeObserverDirective","nzResizeObserver","elementRef","nzResizeObserve","nzResizeObserverDisabled","currentSubscription","_a","ngAfterContentInit","ngOnChanges","changes","ElementRef","ɵdir","prototype","selector","NzResizeObserverModule","ɵmod","ɵinj","providers","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Input, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\nclass NzResizeObserverFactory {\n    create(callback) {\n        return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n    }\n}\nNzResizeObserverFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserverFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNzResizeObserverFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserverFactory, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserverFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** An injectable service that allows watching elements for changes to their content. */\nclass NzResizeObserver {\n    constructor(nzResizeObserverFactory) {\n        this.nzResizeObserverFactory = nzResizeObserverFactory;\n        /** Keeps track of the existing ResizeObservers so they can be reused. */\n        this.observedElements = new Map();\n    }\n    ngOnDestroy() {\n        this.observedElements.forEach((_, element) => this.cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        return new Observable((observer) => {\n            const stream = this.observeElement(element);\n            const subscription = stream.subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                this.unobserveElement(element);\n            };\n        });\n    }\n    /**\n     * Observes the given element by using the existing ResizeObserver if available, or creating a\n     * new one if not.\n     */\n    observeElement(element) {\n        if (!this.observedElements.has(element)) {\n            const stream = new Subject();\n            const observer = this.nzResizeObserverFactory.create((mutations) => stream.next(mutations));\n            if (observer) {\n                observer.observe(element);\n            }\n            this.observedElements.set(element, { observer, stream, count: 1 });\n        }\n        else {\n            this.observedElements.get(element).count++;\n        }\n        return this.observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n     * observing this element.\n     */\n    unobserveElement(element) {\n        if (this.observedElements.has(element)) {\n            this.observedElements.get(element).count--;\n            if (!this.observedElements.get(element).count) {\n                this.cleanupObserver(element);\n            }\n        }\n    }\n    /** Clean up the underlying ResizeObserver for the specified element. */\n    cleanupObserver(element) {\n        if (this.observedElements.has(element)) {\n            const { observer, stream } = this.observedElements.get(element);\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this.observedElements.delete(element);\n        }\n    }\n}\nNzResizeObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserver, deps: [{ token: NzResizeObserverFactory }], target: i0.ɵɵFactoryTarget.Injectable });\nNzResizeObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: NzResizeObserverFactory }]; } });\n\nclass NzResizeObserverDirective {\n    constructor(nzResizeObserver, elementRef) {\n        this.nzResizeObserver = nzResizeObserver;\n        this.elementRef = elementRef;\n        this.nzResizeObserve = new EventEmitter();\n        this.nzResizeObserverDisabled = false;\n        this.currentSubscription = null;\n    }\n    subscribe() {\n        this.unsubscribe();\n        this.currentSubscription = this.nzResizeObserver.observe(this.elementRef).subscribe(this.nzResizeObserve);\n    }\n    unsubscribe() {\n        var _a;\n        (_a = this.currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n    ngAfterContentInit() {\n        if (!this.currentSubscription && !this.nzResizeObserverDisabled) {\n            this.subscribe();\n        }\n    }\n    ngOnDestroy() {\n        this.unsubscribe();\n    }\n    ngOnChanges(changes) {\n        const { nzResizeObserve } = changes;\n        if (nzResizeObserve) {\n            if (this.nzResizeObserverDisabled) {\n                this.unsubscribe();\n            }\n            else {\n                this.subscribe();\n            }\n        }\n    }\n}\nNzResizeObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserverDirective, deps: [{ token: NzResizeObserver }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nNzResizeObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.11\", type: NzResizeObserverDirective, selector: \"[nzResizeObserver]\", inputs: { nzResizeObserverDisabled: \"nzResizeObserverDisabled\" }, outputs: { nzResizeObserve: \"nzResizeObserve\" }, usesOnChanges: true, ngImport: i0 });\n__decorate([\n    InputBoolean()\n], NzResizeObserverDirective.prototype, \"nzResizeObserverDisabled\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserverDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[nzResizeObserver]'\n                }]\n        }], ctorParameters: function () { return [{ type: NzResizeObserver }, { type: i0.ElementRef }]; }, propDecorators: { nzResizeObserve: [{\n                type: Output\n            }], nzResizeObserverDisabled: [{\n                type: Input\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzResizeObserverModule {\n}\nNzResizeObserverModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNzResizeObserverModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserverModule, declarations: [NzResizeObserverDirective], exports: [NzResizeObserverDirective] });\nNzResizeObserverModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserverModule, providers: [NzResizeObserverFactory] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzResizeObserverModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [NzResizeObserverFactory],\n                    declarations: [NzResizeObserverDirective],\n                    exports: [NzResizeObserverDirective]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzResizeObserver, NzResizeObserverDirective, NzResizeObserverFactory, NzResizeObserverModule };\n"]},"metadata":{},"sourceType":"module"}