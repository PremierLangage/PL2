{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, mapTo } from 'rxjs/operators';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { generate } from 'ng-zorro-antd/core/color';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { canUseDom, updateCSS } from 'ng-zorro-antd/core/util';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * User should provide an object implements this interface to set global configurations.\n */\n\nconst NZ_CONFIG = new InjectionToken('nz-config');\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nconst dynamicStyleMark = `-ant-${Date.now()}-${Math.random()}`;\n\nfunction getStyle(globalPrefixCls, theme) {\n  const variables = {};\n\n  const formatColor = (color, updater) => {\n    let clone = color.clone();\n    clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;\n    return clone.toRgbString();\n  };\n\n  const fillColor = (colorVal, type) => {\n    const baseColor = new TinyColor(colorVal);\n    const colorPalettes = generate(baseColor.toRgbString());\n    variables[`${type}-color`] = formatColor(baseColor);\n    variables[`${type}-color-disabled`] = colorPalettes[1];\n    variables[`${type}-color-hover`] = colorPalettes[4];\n    variables[`${type}-color-active`] = colorPalettes[7];\n    variables[`${type}-color-outline`] = baseColor.clone().setAlpha(0.2).toRgbString();\n    variables[`${type}-color-deprecated-bg`] = colorPalettes[1];\n    variables[`${type}-color-deprecated-border`] = colorPalettes[3];\n  }; // ================ Primary Color ================\n\n\n  if (theme.primaryColor) {\n    fillColor(theme.primaryColor, 'primary');\n    const primaryColor = new TinyColor(theme.primaryColor);\n    const primaryColors = generate(primaryColor.toRgbString()); // Legacy - We should use semantic naming standard\n\n    primaryColors.forEach((color, index) => {\n      variables[`primary-${index + 1}`] = color;\n    }); // Deprecated\n\n    variables['primary-color-deprecated-l-35'] = formatColor(primaryColor, c => c.lighten(35));\n    variables['primary-color-deprecated-l-20'] = formatColor(primaryColor, c => c.lighten(20));\n    variables['primary-color-deprecated-t-20'] = formatColor(primaryColor, c => c.tint(20));\n    variables['primary-color-deprecated-t-50'] = formatColor(primaryColor, c => c.tint(50));\n    variables['primary-color-deprecated-f-12'] = formatColor(primaryColor, c => c.setAlpha(c.getAlpha() * 0.12));\n    const primaryActiveColor = new TinyColor(primaryColors[0]);\n    variables['primary-color-active-deprecated-f-30'] = formatColor(primaryActiveColor, c => c.setAlpha(c.getAlpha() * 0.3));\n    variables['primary-color-active-deprecated-d-02'] = formatColor(primaryActiveColor, c => c.darken(2));\n  } // ================ Success Color ================\n\n\n  if (theme.successColor) {\n    fillColor(theme.successColor, 'success');\n  } // ================ Warning Color ================\n\n\n  if (theme.warningColor) {\n    fillColor(theme.warningColor, 'warning');\n  } // ================= Error Color =================\n\n\n  if (theme.errorColor) {\n    fillColor(theme.errorColor, 'error');\n  } // ================= Info Color ==================\n\n\n  if (theme.infoColor) {\n    fillColor(theme.infoColor, 'info');\n  } // Convert to css variables\n\n\n  const cssList = Object.keys(variables).map(key => `--${globalPrefixCls}-${key}: ${variables[key]};`);\n  return `\n  :root {\n    ${cssList.join('\\n')}\n  }\n  `.trim();\n}\n\nfunction registerTheme(globalPrefixCls, theme) {\n  const style = getStyle(globalPrefixCls, theme);\n\n  if (canUseDom()) {\n    updateCSS(style, `${dynamicStyleMark}-dynamic-theme`);\n  } else {\n    warn(`NzConfigService: SSR do not support dynamic theme with css variables.`);\n  }\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst isDefined = function (value) {\n  return value !== undefined;\n};\n\nconst defaultPrefixCls = 'ant';\n\nclass NzConfigService {\n  constructor(defaultConfig) {\n    var _a;\n\n    this.configUpdated$ = new Subject();\n    this.config = defaultConfig || {};\n\n    if (this.config.theme) {\n      // If theme is set with NZ_CONFIG, register theme to make sure css variables work\n      registerTheme(((_a = this.getConfig().prefixCls) === null || _a === void 0 ? void 0 : _a.prefixCls) || defaultPrefixCls, this.config.theme);\n    }\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  getConfigForComponent(componentName) {\n    return this.config[componentName];\n  }\n\n  getConfigChangeEventForComponent(componentName) {\n    return this.configUpdated$.pipe(filter(n => n === componentName), mapTo(undefined));\n  }\n\n  set(componentName, value) {\n    var _a;\n\n    this.config[componentName] = Object.assign(Object.assign({}, this.config[componentName]), value);\n\n    if (componentName === 'theme' && this.config.theme) {\n      registerTheme(((_a = this.getConfig().prefixCls) === null || _a === void 0 ? void 0 : _a.prefixCls) || defaultPrefixCls, this.config.theme);\n    }\n\n    this.configUpdated$.next(componentName);\n  }\n\n}\n\nNzConfigService.ɵfac = function NzConfigService_Factory(t) {\n  return new (t || NzConfigService)(i0.ɵɵinject(NZ_CONFIG, 8));\n};\n\nNzConfigService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NzConfigService,\n  factory: NzConfigService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzConfigService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NZ_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/* eslint-disable no-invalid-this */\n\n/**\n * This decorator is used to decorate properties. If a property is decorated, it would try to load default value from\n * config.\n */\n// eslint-disable-next-line\n\n\nfunction WithConfig() {\n  return function ConfigDecorator(target, propName, originalDescriptor) {\n    const privatePropName = `$$__zorroConfigDecorator__${propName}`;\n    Object.defineProperty(target, privatePropName, {\n      configurable: true,\n      writable: true,\n      enumerable: false\n    });\n    return {\n      get() {\n        var _a, _b;\n\n        const originalValue = (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.get) ? originalDescriptor.get.bind(this)() : this[privatePropName];\n        const assignedByUser = (((_a = this.propertyAssignCounter) === null || _a === void 0 ? void 0 : _a[propName]) || 0) > 1;\n        const configValue = (_b = this.nzConfigService.getConfigForComponent(this._nzModuleName)) === null || _b === void 0 ? void 0 : _b[propName];\n\n        if (assignedByUser && isDefined(originalValue)) {\n          return originalValue;\n        } else {\n          return isDefined(configValue) ? configValue : originalValue;\n        }\n      },\n\n      set(value) {\n        // If the value is assigned, we consider the newly assigned value as 'assigned by user'.\n        this.propertyAssignCounter = this.propertyAssignCounter || {};\n        this.propertyAssignCounter[propName] = (this.propertyAssignCounter[propName] || 0) + 1;\n\n        if (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.set) {\n          originalDescriptor.set.bind(this)(value);\n        } else {\n          this[privatePropName] = value;\n        }\n      },\n\n      configurable: true,\n      enumerable: true\n    };\n  };\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NZ_CONFIG, NzConfigService, WithConfig, getStyle, registerTheme };","map":{"version":3,"sources":["/home/ofgha/Documents/PL2/front-end/node_modules/ng-zorro-antd/fesm2015/ng-zorro-antd-core-config.mjs"],"names":["i0","InjectionToken","Injectable","Optional","Inject","Subject","filter","mapTo","TinyColor","generate","warn","canUseDom","updateCSS","NZ_CONFIG","dynamicStyleMark","Date","now","Math","random","getStyle","globalPrefixCls","theme","variables","formatColor","color","updater","clone","toRgbString","fillColor","colorVal","type","baseColor","colorPalettes","setAlpha","primaryColor","primaryColors","forEach","index","c","lighten","tint","getAlpha","primaryActiveColor","darken","successColor","warningColor","errorColor","infoColor","cssList","Object","keys","map","key","join","trim","registerTheme","style","isDefined","value","undefined","defaultPrefixCls","NzConfigService","constructor","defaultConfig","_a","configUpdated$","config","getConfig","prefixCls","getConfigForComponent","componentName","getConfigChangeEventForComponent","pipe","n","set","assign","next","ɵfac","ɵprov","args","providedIn","decorators","WithConfig","ConfigDecorator","target","propName","originalDescriptor","privatePropName","defineProperty","configurable","writable","enumerable","get","_b","originalValue","bind","assignedByUser","propertyAssignCounter","configValue","nzConfigService","_nzModuleName"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, mapTo } from 'rxjs/operators';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport { generate } from 'ng-zorro-antd/core/color';\nimport { warn } from 'ng-zorro-antd/core/logger';\nimport { canUseDom, updateCSS } from 'ng-zorro-antd/core/util';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * User should provide an object implements this interface to set global configurations.\n */\nconst NZ_CONFIG = new InjectionToken('nz-config');\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst dynamicStyleMark = `-ant-${Date.now()}-${Math.random()}`;\nfunction getStyle(globalPrefixCls, theme) {\n    const variables = {};\n    const formatColor = (color, updater) => {\n        let clone = color.clone();\n        clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;\n        return clone.toRgbString();\n    };\n    const fillColor = (colorVal, type) => {\n        const baseColor = new TinyColor(colorVal);\n        const colorPalettes = generate(baseColor.toRgbString());\n        variables[`${type}-color`] = formatColor(baseColor);\n        variables[`${type}-color-disabled`] = colorPalettes[1];\n        variables[`${type}-color-hover`] = colorPalettes[4];\n        variables[`${type}-color-active`] = colorPalettes[7];\n        variables[`${type}-color-outline`] = baseColor.clone().setAlpha(0.2).toRgbString();\n        variables[`${type}-color-deprecated-bg`] = colorPalettes[1];\n        variables[`${type}-color-deprecated-border`] = colorPalettes[3];\n    };\n    // ================ Primary Color ================\n    if (theme.primaryColor) {\n        fillColor(theme.primaryColor, 'primary');\n        const primaryColor = new TinyColor(theme.primaryColor);\n        const primaryColors = generate(primaryColor.toRgbString());\n        // Legacy - We should use semantic naming standard\n        primaryColors.forEach((color, index) => {\n            variables[`primary-${index + 1}`] = color;\n        });\n        // Deprecated\n        variables['primary-color-deprecated-l-35'] = formatColor(primaryColor, c => c.lighten(35));\n        variables['primary-color-deprecated-l-20'] = formatColor(primaryColor, c => c.lighten(20));\n        variables['primary-color-deprecated-t-20'] = formatColor(primaryColor, c => c.tint(20));\n        variables['primary-color-deprecated-t-50'] = formatColor(primaryColor, c => c.tint(50));\n        variables['primary-color-deprecated-f-12'] = formatColor(primaryColor, c => c.setAlpha(c.getAlpha() * 0.12));\n        const primaryActiveColor = new TinyColor(primaryColors[0]);\n        variables['primary-color-active-deprecated-f-30'] = formatColor(primaryActiveColor, c => c.setAlpha(c.getAlpha() * 0.3));\n        variables['primary-color-active-deprecated-d-02'] = formatColor(primaryActiveColor, c => c.darken(2));\n    }\n    // ================ Success Color ================\n    if (theme.successColor) {\n        fillColor(theme.successColor, 'success');\n    }\n    // ================ Warning Color ================\n    if (theme.warningColor) {\n        fillColor(theme.warningColor, 'warning');\n    }\n    // ================= Error Color =================\n    if (theme.errorColor) {\n        fillColor(theme.errorColor, 'error');\n    }\n    // ================= Info Color ==================\n    if (theme.infoColor) {\n        fillColor(theme.infoColor, 'info');\n    }\n    // Convert to css variables\n    const cssList = Object.keys(variables).map(key => `--${globalPrefixCls}-${key}: ${variables[key]};`);\n    return `\n  :root {\n    ${cssList.join('\\n')}\n  }\n  `.trim();\n}\nfunction registerTheme(globalPrefixCls, theme) {\n    const style = getStyle(globalPrefixCls, theme);\n    if (canUseDom()) {\n        updateCSS(style, `${dynamicStyleMark}-dynamic-theme`);\n    }\n    else {\n        warn(`NzConfigService: SSR do not support dynamic theme with css variables.`);\n    }\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst isDefined = function (value) {\n    return value !== undefined;\n};\nconst defaultPrefixCls = 'ant';\nclass NzConfigService {\n    constructor(defaultConfig) {\n        var _a;\n        this.configUpdated$ = new Subject();\n        this.config = defaultConfig || {};\n        if (this.config.theme) {\n            // If theme is set with NZ_CONFIG, register theme to make sure css variables work\n            registerTheme(((_a = this.getConfig().prefixCls) === null || _a === void 0 ? void 0 : _a.prefixCls) || defaultPrefixCls, this.config.theme);\n        }\n    }\n    getConfig() {\n        return this.config;\n    }\n    getConfigForComponent(componentName) {\n        return this.config[componentName];\n    }\n    getConfigChangeEventForComponent(componentName) {\n        return this.configUpdated$.pipe(filter(n => n === componentName), mapTo(undefined));\n    }\n    set(componentName, value) {\n        var _a;\n        this.config[componentName] = Object.assign(Object.assign({}, this.config[componentName]), value);\n        if (componentName === 'theme' && this.config.theme) {\n            registerTheme(((_a = this.getConfig().prefixCls) === null || _a === void 0 ? void 0 : _a.prefixCls) || defaultPrefixCls, this.config.theme);\n        }\n        this.configUpdated$.next(componentName);\n    }\n}\nNzConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzConfigService, deps: [{ token: NZ_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nNzConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzConfigService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzConfigService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [NZ_CONFIG]\n                    }] }];\n    } });\n/* eslint-disable no-invalid-this */\n/**\n * This decorator is used to decorate properties. If a property is decorated, it would try to load default value from\n * config.\n */\n// eslint-disable-next-line\nfunction WithConfig() {\n    return function ConfigDecorator(target, propName, originalDescriptor) {\n        const privatePropName = `$$__zorroConfigDecorator__${propName}`;\n        Object.defineProperty(target, privatePropName, {\n            configurable: true,\n            writable: true,\n            enumerable: false\n        });\n        return {\n            get() {\n                var _a, _b;\n                const originalValue = (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.get) ? originalDescriptor.get.bind(this)() : this[privatePropName];\n                const assignedByUser = (((_a = this.propertyAssignCounter) === null || _a === void 0 ? void 0 : _a[propName]) || 0) > 1;\n                const configValue = (_b = this.nzConfigService.getConfigForComponent(this._nzModuleName)) === null || _b === void 0 ? void 0 : _b[propName];\n                if (assignedByUser && isDefined(originalValue)) {\n                    return originalValue;\n                }\n                else {\n                    return isDefined(configValue) ? configValue : originalValue;\n                }\n            },\n            set(value) {\n                // If the value is assigned, we consider the newly assigned value as 'assigned by user'.\n                this.propertyAssignCounter = this.propertyAssignCounter || {};\n                this.propertyAssignCounter[propName] = (this.propertyAssignCounter[propName] || 0) + 1;\n                if (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.set) {\n                    originalDescriptor.set.bind(this)(value);\n                }\n                else {\n                    this[privatePropName] = value;\n                }\n            },\n            configurable: true,\n            enumerable: true\n        };\n    };\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NZ_CONFIG, NzConfigService, WithConfig, getStyle, registerTheme };\n"]},"metadata":{},"sourceType":"module"}