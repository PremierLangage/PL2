{"ast":null,"code":"import * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, NgModule } from '@angular/core';\nimport * as i5 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i4 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { __rest, __decorate } from 'tslib';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\nimport { isNotNil, InputNumber } from 'ng-zorro-antd/core/util';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nfunction NzProgressComponent_ng_template_0_span_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"nzType\", ctx_r5.icon);\n  }\n}\n\nfunction NzProgressComponent_ng_template_0_span_0_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const formatter_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", formatter_r9(ctx_r8.nzPercent), \" \");\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction NzProgressComponent_ng_template_0_span_0_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_span_0_ng_template_2_ng_container_0_Template, 2, 1, \"ng-container\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r7.formatter)(\"nzStringTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r7.nzPercent));\n  }\n}\n\nfunction NzProgressComponent_ng_template_0_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 5);\n    i0.ɵɵtemplate(1, NzProgressComponent_ng_template_0_span_0_ng_container_1_Template, 2, 1, \"ng-container\", 6);\n    i0.ɵɵtemplate(2, NzProgressComponent_ng_template_0_span_0_ng_template_2_Template, 1, 4, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r6 = i0.ɵɵreference(3);\n\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r4.status === \"exception\" || ctx_r4.status === \"success\") && !ctx_r4.nzFormat)(\"ngIfElse\", _r6);\n  }\n}\n\nfunction NzProgressComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_span_0_Template, 4, 2, \"span\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.nzShowInfo);\n  }\n}\n\nfunction NzProgressComponent_div_3_ng_container_1_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 17);\n  }\n\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(4);\n    i0.ɵɵstyleProp(\"width\", ctx_r14.nzSuccessPercent, \"%\")(\"border-radius\", ctx_r14.nzStrokeLinecap === \"round\" ? \"100px\" : \"0\")(\"height\", ctx_r14.strokeWidth, \"px\");\n  }\n}\n\nfunction NzProgressComponent_div_3_ng_container_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14);\n    i0.ɵɵelement(2, \"div\", 15);\n    i0.ɵɵtemplate(3, NzProgressComponent_div_3_ng_container_1_div_1_div_3_Template, 1, 6, \"div\", 16);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", ctx_r12.nzPercent, \"%\")(\"border-radius\", ctx_r12.nzStrokeLinecap === \"round\" ? \"100px\" : \"0\")(\"background\", !ctx_r12.isGradient ? ctx_r12.nzStrokeColor : null)(\"background-image\", ctx_r12.isGradient ? ctx_r12.lineGradient : null)(\"height\", ctx_r12.strokeWidth, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r12.nzSuccessPercent || ctx_r12.nzSuccessPercent === 0);\n  }\n}\n\nfunction NzProgressComponent_div_3_ng_container_1_ng_template_2_Template(rf, ctx) {}\n\nfunction NzProgressComponent_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NzProgressComponent_div_3_ng_container_1_div_1_Template, 4, 11, \"div\", 11);\n    i0.ɵɵtemplate(2, NzProgressComponent_div_3_ng_container_1_ng_template_2_Template, 0, 0, \"ng-template\", 12);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r10.isSteps);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\n\nfunction NzProgressComponent_div_3_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 20);\n  }\n\n  if (rf & 2) {\n    const step_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngStyle\", step_r17);\n  }\n}\n\nfunction NzProgressComponent_div_3_div_2_ng_template_2_Template(rf, ctx) {}\n\nfunction NzProgressComponent_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, NzProgressComponent_div_3_div_2_div_1_Template, 1, 1, \"div\", 19);\n    i0.ɵɵtemplate(2, NzProgressComponent_div_3_div_2_ng_template_2_Template, 0, 0, \"ng-template\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r11.steps);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\n\nfunction NzProgressComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NzProgressComponent_div_3_ng_container_1_Template, 3, 2, \"ng-container\", 2);\n    i0.ɵɵtemplate(2, NzProgressComponent_div_3_div_2_Template, 3, 2, \"div\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.isSteps);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.isSteps);\n  }\n}\n\nfunction NzProgressComponent_div_4__svg_defs_2__svg_stop_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    const i_r23 = ctx.$implicit;\n    i0.ɵɵattribute(\"offset\", i_r23.offset)(\"stop-color\", i_r23.color);\n  }\n}\n\nfunction NzProgressComponent_div_4__svg_defs_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\")(1, \"linearGradient\", 24);\n    i0.ɵɵtemplate(2, NzProgressComponent_div_4__svg_defs_2__svg_stop_2_Template, 1, 2, \"stop\", 25);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"gradient-\" + ctx_r19.gradientId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r19.circleGradient);\n  }\n}\n\nfunction NzProgressComponent_div_4__svg_path_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 26);\n  }\n\n  if (rf & 2) {\n    const p_r24 = ctx.$implicit;\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", p_r24.strokePathStyle);\n    i0.ɵɵattribute(\"d\", ctx_r20.pathString)(\"stroke-linecap\", ctx_r20.nzStrokeLinecap)(\"stroke\", p_r24.stroke)(\"stroke-width\", ctx_r20.nzPercent ? ctx_r20.strokeWidth : 0);\n  }\n}\n\nfunction NzProgressComponent_div_4_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n  }\n}\n\nfunction NzProgressComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 21);\n    i0.ɵɵtemplate(2, NzProgressComponent_div_4__svg_defs_2_Template, 3, 2, \"defs\", 2);\n    i0.ɵɵelement(3, \"path\", 22);\n    i0.ɵɵtemplate(4, NzProgressComponent_div_4__svg_path_4_Template, 1, 5, \"path\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, NzProgressComponent_div_4_ng_template_5_Template, 0, 0, \"ng-template\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵstyleProp(\"width\", ctx_r3.nzWidth, \"px\")(\"height\", ctx_r3.nzWidth, \"px\")(\"font-size\", ctx_r3.nzWidth * 0.15 + 6, \"px\");\n    i0.ɵɵclassProp(\"ant-progress-circle-gradient\", ctx_r3.isGradient);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.isGradient);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r3.trailPathStyle);\n    i0.ɵɵattribute(\"stroke-width\", ctx_r3.strokeWidth)(\"d\", ctx_r3.pathString);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.progressCirclePath)(\"ngForTrackBy\", ctx_r3.trackByFn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\n\nfunction stripPercentToNumber(percent) {\n  return +percent.replace('%', '');\n}\n\nconst sortGradient = gradients => {\n  let tempArr = [];\n  Object.keys(gradients).forEach(key => {\n    const value = gradients[key];\n    const formatKey = stripPercentToNumber(key);\n\n    if (!isNaN(formatKey)) {\n      tempArr.push({\n        key: formatKey,\n        value\n      });\n    }\n  });\n  tempArr = tempArr.sort((a, b) => a.key - b.key);\n  return tempArr;\n};\n\nconst handleCircleGradient = strokeColor => sortGradient(strokeColor).map(({\n  key,\n  value\n}) => ({\n  offset: `${key}%`,\n  color: value\n}));\n\nconst handleLinearGradient = strokeColor => {\n  const {\n    from = '#1890ff',\n    to = '#1890ff',\n    direction = 'to right'\n  } = strokeColor,\n        rest = __rest(strokeColor, [\"from\", \"to\", \"direction\"]);\n\n  if (Object.keys(rest).length !== 0) {\n    const sortedGradients = sortGradient(rest).map(({\n      key,\n      value\n    }) => `${value} ${key}%`).join(', ');\n    return `linear-gradient(${direction}, ${sortedGradients})`;\n  }\n\n  return `linear-gradient(${direction}, ${from}, ${to})`;\n};\n\nlet gradientIdSeed = 0;\nconst NZ_CONFIG_MODULE_NAME = 'progress';\nconst statusIconNameMap = new Map([['success', 'check'], ['exception', 'close']]);\nconst statusColorMap = new Map([['normal', '#108ee9'], ['exception', '#ff5500'], ['success', '#87d068']]);\n\nconst defaultFormatter = p => `${p}%`;\n\nclass NzProgressComponent {\n  constructor(cdr, nzConfigService, directionality) {\n    this.cdr = cdr;\n    this.nzConfigService = nzConfigService;\n    this.directionality = directionality;\n    this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n    this.nzShowInfo = true;\n    this.nzWidth = 132;\n    this.nzStrokeColor = undefined;\n    this.nzSize = 'default';\n    this.nzPercent = 0;\n    this.nzStrokeWidth = undefined;\n    this.nzGapDegree = undefined;\n    this.nzType = 'line';\n    this.nzGapPosition = 'top';\n    this.nzStrokeLinecap = 'round';\n    this.nzSteps = 0;\n    this.steps = [];\n    /** Gradient style when `nzType` is `line`. */\n\n    this.lineGradient = null;\n    /** If user uses gradient color. */\n\n    this.isGradient = false;\n    /** If the linear progress is a step progress. */\n\n    this.isSteps = false;\n    /**\n     * Each progress whose `nzType` is circle or dashboard should have unique id to\n     * define `<linearGradient>`.\n     */\n\n    this.gradientId = gradientIdSeed++;\n    /** Paths to rendered in the template. */\n\n    this.progressCirclePath = [];\n    this.trailPathStyle = null;\n    this.dir = 'ltr';\n\n    this.trackByFn = index => `${index}`;\n\n    this.cachedStatus = 'normal';\n    this.inferredStatus = 'normal';\n    this.destroy$ = new Subject();\n  }\n\n  get formatter() {\n    return this.nzFormat || defaultFormatter;\n  }\n\n  get status() {\n    return this.nzStatus || this.inferredStatus;\n  }\n\n  get strokeWidth() {\n    return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n  }\n\n  get isCircleStyle() {\n    return this.nzType === 'circle' || this.nzType === 'dashboard';\n  }\n\n  ngOnChanges(changes) {\n    const {\n      nzSteps,\n      nzGapPosition,\n      nzStrokeLinecap,\n      nzStrokeColor,\n      nzGapDegree,\n      nzType,\n      nzStatus,\n      nzPercent,\n      nzSuccessPercent,\n      nzStrokeWidth\n    } = changes;\n\n    if (nzStatus) {\n      this.cachedStatus = this.nzStatus || this.cachedStatus;\n    }\n\n    if (nzPercent || nzSuccessPercent) {\n      const fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n\n      if (fillAll) {\n        if (isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent >= 100 || this.nzSuccessPercent === undefined) {\n          this.inferredStatus = 'success';\n        }\n      } else {\n        this.inferredStatus = this.cachedStatus;\n      }\n    }\n\n    if (nzStatus || nzPercent || nzSuccessPercent || nzStrokeColor) {\n      this.updateIcon();\n    }\n\n    if (nzStrokeColor) {\n      this.setStrokeColor();\n    }\n\n    if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor || nzStrokeColor) {\n      this.getCirclePaths();\n    }\n\n    if (nzPercent || nzSteps || nzStrokeWidth) {\n      this.isSteps = this.nzSteps > 0;\n\n      if (this.isSteps) {\n        this.getSteps();\n      }\n    }\n  }\n\n  ngOnInit() {\n    var _a;\n\n    this.nzConfigService.getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME).pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this.updateIcon();\n      this.setStrokeColor();\n      this.getCirclePaths();\n    });\n    (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n      this.dir = direction;\n      this.cdr.detectChanges();\n    });\n    this.dir = this.directionality.value;\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  updateIcon() {\n    const ret = statusIconNameMap.get(this.status);\n    this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n  }\n  /**\n   * Calculate step render configs.\n   */\n\n\n  getSteps() {\n    const current = Math.floor(this.nzSteps * (this.nzPercent / 100));\n    const stepWidth = this.nzSize === 'small' ? 2 : 14;\n    const steps = [];\n\n    for (let i = 0; i < this.nzSteps; i++) {\n      let color;\n\n      if (i <= current - 1) {\n        color = this.nzStrokeColor;\n      }\n\n      const stepStyle = {\n        backgroundColor: `${color}`,\n        width: `${stepWidth}px`,\n        height: `${this.strokeWidth}px`\n      };\n      steps.push(stepStyle);\n    }\n\n    this.steps = steps;\n  }\n  /**\n   * Calculate paths when the type is circle or dashboard.\n   */\n\n\n  getCirclePaths() {\n    if (!this.isCircleStyle) {\n      return;\n    }\n\n    const values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent, this.nzPercent] : [this.nzPercent]; // Calculate shared styles.\n\n    const radius = 50 - this.strokeWidth / 2;\n    const gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n    const len = Math.PI * 2 * radius;\n    const gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n    let beginPositionX = 0;\n    let beginPositionY = -radius;\n    let endPositionX = 0;\n    let endPositionY = radius * -2;\n\n    switch (gapPosition) {\n      case 'left':\n        beginPositionX = -radius;\n        beginPositionY = 0;\n        endPositionX = radius * 2;\n        endPositionY = 0;\n        break;\n\n      case 'right':\n        beginPositionX = radius;\n        beginPositionY = 0;\n        endPositionX = radius * -2;\n        endPositionY = 0;\n        break;\n\n      case 'bottom':\n        beginPositionY = radius;\n        endPositionY = radius * 2;\n        break;\n\n      default:\n    }\n\n    this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n    this.trailPathStyle = {\n      strokeDasharray: `${len - gapDegree}px ${len}px`,\n      strokeDashoffset: `-${gapDegree / 2}px`,\n      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n    }; // Calculate styles for each path.\n\n    this.progressCirclePath = values.map((value, index) => {\n      const isSuccessPercent = values.length === 2 && index === 0;\n      return {\n        stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\n        strokePathStyle: {\n          stroke: !this.isGradient ? isSuccessPercent ? statusColorMap.get('success') : this.nzStrokeColor : null,\n          transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n          strokeDasharray: `${(value || 0) / 100 * (len - gapDegree)}px ${len}px`,\n          strokeDashoffset: `-${gapDegree / 2}px`\n        }\n      };\n    }).reverse();\n  }\n\n  setStrokeColor() {\n    const color = this.nzStrokeColor;\n    const isGradient = this.isGradient = !!color && typeof color !== 'string';\n\n    if (isGradient && !this.isCircleStyle) {\n      this.lineGradient = handleLinearGradient(color);\n    } else if (isGradient && this.isCircleStyle) {\n      this.circleGradient = handleCircleGradient(this.nzStrokeColor);\n    } else {\n      this.lineGradient = null;\n      this.circleGradient = [];\n    }\n  }\n\n}\n\nNzProgressComponent.ɵfac = function NzProgressComponent_Factory(t) {\n  return new (t || NzProgressComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.NzConfigService), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n};\n\nNzProgressComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NzProgressComponent,\n  selectors: [[\"nz-progress\"]],\n  inputs: {\n    nzShowInfo: \"nzShowInfo\",\n    nzWidth: \"nzWidth\",\n    nzStrokeColor: \"nzStrokeColor\",\n    nzSize: \"nzSize\",\n    nzFormat: \"nzFormat\",\n    nzSuccessPercent: \"nzSuccessPercent\",\n    nzPercent: \"nzPercent\",\n    nzStrokeWidth: \"nzStrokeWidth\",\n    nzGapDegree: \"nzGapDegree\",\n    nzStatus: \"nzStatus\",\n    nzType: \"nzType\",\n    nzGapPosition: \"nzGapPosition\",\n    nzStrokeLinecap: \"nzStrokeLinecap\",\n    nzSteps: \"nzSteps\"\n  },\n  exportAs: [\"nzProgress\"],\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 17,\n  consts: [[\"progressInfoTemplate\", \"\"], [3, \"ngClass\"], [4, \"ngIf\"], [\"class\", \"ant-progress-inner\", 3, \"width\", \"height\", \"fontSize\", \"ant-progress-circle-gradient\", 4, \"ngIf\"], [\"class\", \"ant-progress-text\", 4, \"ngIf\"], [1, \"ant-progress-text\"], [4, \"ngIf\", \"ngIfElse\"], [\"formatTemplate\", \"\"], [\"nz-icon\", \"\", 3, \"nzType\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [\"class\", \"ant-progress-steps-outer\", 4, \"ngIf\"], [\"class\", \"ant-progress-outer\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"], [1, \"ant-progress-outer\"], [1, \"ant-progress-inner\"], [1, \"ant-progress-bg\"], [\"class\", \"ant-progress-success-bg\", 3, \"width\", \"border-radius\", \"height\", 4, \"ngIf\"], [1, \"ant-progress-success-bg\"], [1, \"ant-progress-steps-outer\"], [\"class\", \"ant-progress-steps-item\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"ant-progress-steps-item\", 3, \"ngStyle\"], [\"viewBox\", \"0 0 100 100\", 1, \"ant-progress-circle\"], [\"stroke\", \"#f3f3f3\", \"fill-opacity\", \"0\", 1, \"ant-progress-circle-trail\", 3, \"ngStyle\"], [\"class\", \"ant-progress-circle-path\", \"fill-opacity\", \"0\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"x1\", \"100%\", \"y1\", \"0%\", \"x2\", \"0%\", \"y2\", \"0%\", 3, \"id\"], [4, \"ngFor\", \"ngForOf\"], [\"fill-opacity\", \"0\", 1, \"ant-progress-circle-path\", 3, \"ngStyle\"]],\n  template: function NzProgressComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_Template, 1, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(2, \"div\", 1);\n      i0.ɵɵtemplate(3, NzProgressComponent_div_3_Template, 3, 2, \"div\", 2);\n      i0.ɵɵtemplate(4, NzProgressComponent_div_4_Template, 6, 15, \"div\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"ant-progress-line\", ctx.nzType === \"line\")(\"ant-progress-small\", ctx.nzSize === \"small\")(\"ant-progress-default\", ctx.nzSize === \"default\")(\"ant-progress-show-info\", ctx.nzShowInfo)(\"ant-progress-circle\", ctx.isCircleStyle)(\"ant-progress-steps\", ctx.isSteps)(\"ant-progress-rtl\", ctx.dir === \"rtl\");\n      i0.ɵɵproperty(\"ngClass\", \"ant-progress ant-progress-status-\" + ctx.status);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.nzType === \"line\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isCircleStyle);\n    }\n  },\n  directives: [i3.NgIf, i4.NzIconDirective, i5.NzStringTemplateOutletDirective, i3.NgClass, i3.NgTemplateOutlet, i3.NgForOf, i3.NgStyle],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzShowInfo\", void 0);\n\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzStrokeColor\", void 0);\n\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzSize\", void 0);\n\n__decorate([InputNumber()], NzProgressComponent.prototype, \"nzSuccessPercent\", void 0);\n\n__decorate([InputNumber()], NzProgressComponent.prototype, \"nzPercent\", void 0);\n\n__decorate([WithConfig(), InputNumber()], NzProgressComponent.prototype, \"nzStrokeWidth\", void 0);\n\n__decorate([WithConfig(), InputNumber()], NzProgressComponent.prototype, \"nzGapDegree\", void 0);\n\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzGapPosition\", void 0);\n\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzStrokeLinecap\", void 0);\n\n__decorate([InputNumber()], NzProgressComponent.prototype, \"nzSteps\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzProgressComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      selector: 'nz-progress',\n      exportAs: 'nzProgress',\n      preserveWhitespaces: false,\n      template: `\n    <ng-template #progressInfoTemplate>\n      <span class=\"ant-progress-text\" *ngIf=\"nzShowInfo\">\n        <ng-container *ngIf=\"(status === 'exception' || status === 'success') && !nzFormat; else formatTemplate\">\n          <i nz-icon [nzType]=\"icon\"></i>\n        </ng-container>\n        <ng-template #formatTemplate>\n          <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }; let formatter\">\n            {{ formatter(nzPercent) }}\n          </ng-container>\n        </ng-template>\n      </span>\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType === 'line'\"\n      [class.ant-progress-small]=\"nzSize === 'small'\"\n      [class.ant-progress-default]=\"nzSize === 'default'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n      [class.ant-progress-rtl]=\"dir === 'rtl'\"\n    >\n      <!-- line progress -->\n      <div *ngIf=\"nzType === 'line'\">\n        <!-- normal line style -->\n        <ng-container *ngIf=\"!isSteps\">\n          <div class=\"ant-progress-outer\" *ngIf=\"!isSteps\">\n            <div class=\"ant-progress-inner\">\n              <div\n                class=\"ant-progress-bg\"\n                [style.width.%]=\"nzPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                [style.background-image]=\"isGradient ? lineGradient : null\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n              <div\n                *ngIf=\"nzSuccessPercent || nzSuccessPercent === 0\"\n                class=\"ant-progress-success-bg\"\n                [style.width.%]=\"nzSuccessPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n            </div>\n          </div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </ng-container>\n        <!-- step style -->\n        <div class=\"ant-progress-steps-outer\" *ngIf=\"isSteps\">\n          <div *ngFor=\"let step of steps; let i = index\" class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </div>\n      </div>\n\n      <!-- circle / dashboard progress -->\n      <div\n        [style.width.px]=\"this.nzWidth\"\n        [style.height.px]=\"this.nzWidth\"\n        [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n        class=\"ant-progress-inner\"\n        [class.ant-progress-circle-gradient]=\"isGradient\"\n        *ngIf=\"isCircleStyle\"\n      >\n        <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n          <defs *ngIf=\"isGradient\">\n            <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n              <stop *ngFor=\"let i of circleGradient\" [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n            </linearGradient>\n          </defs>\n          <path\n            class=\"ant-progress-circle-trail\"\n            stroke=\"#f3f3f3\"\n            fill-opacity=\"0\"\n            [attr.stroke-width]=\"strokeWidth\"\n            [attr.d]=\"pathString\"\n            [ngStyle]=\"trailPathStyle\"\n          ></path>\n          <path\n            *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\n            class=\"ant-progress-circle-path\"\n            fill-opacity=\"0\"\n            [attr.d]=\"pathString\"\n            [attr.stroke-linecap]=\"nzStrokeLinecap\"\n            [attr.stroke]=\"p.stroke\"\n            [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n            [ngStyle]=\"p.strokePathStyle\"\n          ></path>\n        </svg>\n        <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n      </div>\n    </div>\n  `\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.NzConfigService\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    nzShowInfo: [{\n      type: Input\n    }],\n    nzWidth: [{\n      type: Input\n    }],\n    nzStrokeColor: [{\n      type: Input\n    }],\n    nzSize: [{\n      type: Input\n    }],\n    nzFormat: [{\n      type: Input\n    }],\n    nzSuccessPercent: [{\n      type: Input\n    }],\n    nzPercent: [{\n      type: Input\n    }],\n    nzStrokeWidth: [{\n      type: Input\n    }],\n    nzGapDegree: [{\n      type: Input\n    }],\n    nzStatus: [{\n      type: Input\n    }],\n    nzType: [{\n      type: Input\n    }],\n    nzGapPosition: [{\n      type: Input\n    }],\n    nzStrokeLinecap: [{\n      type: Input\n    }],\n    nzSteps: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzProgressModule {}\n\nNzProgressModule.ɵfac = function NzProgressModule_Factory(t) {\n  return new (t || NzProgressModule)();\n};\n\nNzProgressModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzProgressModule\n});\nNzProgressModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[BidiModule, CommonModule, NzIconModule, NzOutletModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzProgressModule, [{\n    type: NgModule,\n    args: [{\n      exports: [NzProgressComponent],\n      declarations: [NzProgressComponent],\n      imports: [BidiModule, CommonModule, NzIconModule, NzOutletModule]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzProgressComponent, NzProgressModule };","map":{"version":3,"sources":["/home/ofgha/Documents/PL2/front-end/node_modules/ng-zorro-antd/fesm2015/ng-zorro-antd-progress.mjs"],"names":["i2","BidiModule","i3","CommonModule","i0","Component","ChangeDetectionStrategy","ViewEncapsulation","Optional","Input","NgModule","i5","NzOutletModule","i4","NzIconModule","__rest","__decorate","Subject","takeUntil","i1","WithConfig","isNotNil","InputNumber","stripPercentToNumber","percent","replace","sortGradient","gradients","tempArr","Object","keys","forEach","key","value","formatKey","isNaN","push","sort","a","b","handleCircleGradient","strokeColor","map","offset","color","handleLinearGradient","from","to","direction","rest","length","sortedGradients","join","gradientIdSeed","NZ_CONFIG_MODULE_NAME","statusIconNameMap","Map","statusColorMap","defaultFormatter","p","NzProgressComponent","constructor","cdr","nzConfigService","directionality","_nzModuleName","nzShowInfo","nzWidth","nzStrokeColor","undefined","nzSize","nzPercent","nzStrokeWidth","nzGapDegree","nzType","nzGapPosition","nzStrokeLinecap","nzSteps","steps","lineGradient","isGradient","isSteps","gradientId","progressCirclePath","trailPathStyle","dir","trackByFn","index","cachedStatus","inferredStatus","destroy$","formatter","nzFormat","status","nzStatus","strokeWidth","isCircleStyle","ngOnChanges","changes","nzSuccessPercent","fillAll","parseInt","toString","updateIcon","setStrokeColor","getCirclePaths","getSteps","ngOnInit","_a","getConfigChangeEventForComponent","pipe","subscribe","change","detectChanges","ngOnDestroy","next","complete","ret","get","icon","current","Math","floor","stepWidth","i","stepStyle","backgroundColor","width","height","values","radius","gapPosition","len","PI","gapDegree","beginPositionX","beginPositionY","endPositionX","endPositionY","pathString","strokeDasharray","strokeDashoffset","transition","isSuccessPercent","stroke","strokePathStyle","reverse","circleGradient","ɵfac","ChangeDetectorRef","NzConfigService","Directionality","ɵcmp","NgIf","NzIconDirective","NzStringTemplateOutletDirective","NgClass","NgTemplateOutlet","NgForOf","NgStyle","prototype","type","args","changeDetection","OnPush","encapsulation","None","selector","exportAs","preserveWhitespaces","template","decorators","NzProgressModule","ɵmod","ɵinj","exports","declarations","imports"],"mappings":"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","sourcesContent":["import * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, NgModule } from '@angular/core';\nimport * as i5 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i4 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { __rest, __decorate } from 'tslib';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\nimport { isNotNil, InputNumber } from 'ng-zorro-antd/core/util';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nfunction stripPercentToNumber(percent) {\n    return +percent.replace('%', '');\n}\nconst sortGradient = (gradients) => {\n    let tempArr = [];\n    Object.keys(gradients).forEach(key => {\n        const value = gradients[key];\n        const formatKey = stripPercentToNumber(key);\n        if (!isNaN(formatKey)) {\n            tempArr.push({\n                key: formatKey,\n                value\n            });\n        }\n    });\n    tempArr = tempArr.sort((a, b) => a.key - b.key);\n    return tempArr;\n};\nconst handleCircleGradient = (strokeColor) => sortGradient(strokeColor).map(({ key, value }) => ({ offset: `${key}%`, color: value }));\nconst handleLinearGradient = (strokeColor) => {\n    const { from = '#1890ff', to = '#1890ff', direction = 'to right' } = strokeColor, rest = __rest(strokeColor, [\"from\", \"to\", \"direction\"]);\n    if (Object.keys(rest).length !== 0) {\n        const sortedGradients = sortGradient(rest)\n            .map(({ key, value }) => `${value} ${key}%`)\n            .join(', ');\n        return `linear-gradient(${direction}, ${sortedGradients})`;\n    }\n    return `linear-gradient(${direction}, ${from}, ${to})`;\n};\n\nlet gradientIdSeed = 0;\nconst NZ_CONFIG_MODULE_NAME = 'progress';\nconst statusIconNameMap = new Map([\n    ['success', 'check'],\n    ['exception', 'close']\n]);\nconst statusColorMap = new Map([\n    ['normal', '#108ee9'],\n    ['exception', '#ff5500'],\n    ['success', '#87d068']\n]);\nconst defaultFormatter = (p) => `${p}%`;\nclass NzProgressComponent {\n    constructor(cdr, nzConfigService, directionality) {\n        this.cdr = cdr;\n        this.nzConfigService = nzConfigService;\n        this.directionality = directionality;\n        this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n        this.nzShowInfo = true;\n        this.nzWidth = 132;\n        this.nzStrokeColor = undefined;\n        this.nzSize = 'default';\n        this.nzPercent = 0;\n        this.nzStrokeWidth = undefined;\n        this.nzGapDegree = undefined;\n        this.nzType = 'line';\n        this.nzGapPosition = 'top';\n        this.nzStrokeLinecap = 'round';\n        this.nzSteps = 0;\n        this.steps = [];\n        /** Gradient style when `nzType` is `line`. */\n        this.lineGradient = null;\n        /** If user uses gradient color. */\n        this.isGradient = false;\n        /** If the linear progress is a step progress. */\n        this.isSteps = false;\n        /**\n         * Each progress whose `nzType` is circle or dashboard should have unique id to\n         * define `<linearGradient>`.\n         */\n        this.gradientId = gradientIdSeed++;\n        /** Paths to rendered in the template. */\n        this.progressCirclePath = [];\n        this.trailPathStyle = null;\n        this.dir = 'ltr';\n        this.trackByFn = (index) => `${index}`;\n        this.cachedStatus = 'normal';\n        this.inferredStatus = 'normal';\n        this.destroy$ = new Subject();\n    }\n    get formatter() {\n        return this.nzFormat || defaultFormatter;\n    }\n    get status() {\n        return this.nzStatus || this.inferredStatus;\n    }\n    get strokeWidth() {\n        return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n    }\n    get isCircleStyle() {\n        return this.nzType === 'circle' || this.nzType === 'dashboard';\n    }\n    ngOnChanges(changes) {\n        const { nzSteps, nzGapPosition, nzStrokeLinecap, nzStrokeColor, nzGapDegree, nzType, nzStatus, nzPercent, nzSuccessPercent, nzStrokeWidth } = changes;\n        if (nzStatus) {\n            this.cachedStatus = this.nzStatus || this.cachedStatus;\n        }\n        if (nzPercent || nzSuccessPercent) {\n            const fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n            if (fillAll) {\n                if ((isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent >= 100) || this.nzSuccessPercent === undefined) {\n                    this.inferredStatus = 'success';\n                }\n            }\n            else {\n                this.inferredStatus = this.cachedStatus;\n            }\n        }\n        if (nzStatus || nzPercent || nzSuccessPercent || nzStrokeColor) {\n            this.updateIcon();\n        }\n        if (nzStrokeColor) {\n            this.setStrokeColor();\n        }\n        if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor || nzStrokeColor) {\n            this.getCirclePaths();\n        }\n        if (nzPercent || nzSteps || nzStrokeWidth) {\n            this.isSteps = this.nzSteps > 0;\n            if (this.isSteps) {\n                this.getSteps();\n            }\n        }\n    }\n    ngOnInit() {\n        var _a;\n        this.nzConfigService\n            .getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(() => {\n            this.updateIcon();\n            this.setStrokeColor();\n            this.getCirclePaths();\n        });\n        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe((direction) => {\n            this.dir = direction;\n            this.cdr.detectChanges();\n        });\n        this.dir = this.directionality.value;\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    updateIcon() {\n        const ret = statusIconNameMap.get(this.status);\n        this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n    }\n    /**\n     * Calculate step render configs.\n     */\n    getSteps() {\n        const current = Math.floor(this.nzSteps * (this.nzPercent / 100));\n        const stepWidth = this.nzSize === 'small' ? 2 : 14;\n        const steps = [];\n        for (let i = 0; i < this.nzSteps; i++) {\n            let color;\n            if (i <= current - 1) {\n                color = this.nzStrokeColor;\n            }\n            const stepStyle = {\n                backgroundColor: `${color}`,\n                width: `${stepWidth}px`,\n                height: `${this.strokeWidth}px`\n            };\n            steps.push(stepStyle);\n        }\n        this.steps = steps;\n    }\n    /**\n     * Calculate paths when the type is circle or dashboard.\n     */\n    getCirclePaths() {\n        if (!this.isCircleStyle) {\n            return;\n        }\n        const values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent, this.nzPercent] : [this.nzPercent];\n        // Calculate shared styles.\n        const radius = 50 - this.strokeWidth / 2;\n        const gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n        const len = Math.PI * 2 * radius;\n        const gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n        let beginPositionX = 0;\n        let beginPositionY = -radius;\n        let endPositionX = 0;\n        let endPositionY = radius * -2;\n        switch (gapPosition) {\n            case 'left':\n                beginPositionX = -radius;\n                beginPositionY = 0;\n                endPositionX = radius * 2;\n                endPositionY = 0;\n                break;\n            case 'right':\n                beginPositionX = radius;\n                beginPositionY = 0;\n                endPositionX = radius * -2;\n                endPositionY = 0;\n                break;\n            case 'bottom':\n                beginPositionY = radius;\n                endPositionY = radius * 2;\n                break;\n            default:\n        }\n        this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n        this.trailPathStyle = {\n            strokeDasharray: `${len - gapDegree}px ${len}px`,\n            strokeDashoffset: `-${gapDegree / 2}px`,\n            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n        };\n        // Calculate styles for each path.\n        this.progressCirclePath = values\n            .map((value, index) => {\n            const isSuccessPercent = values.length === 2 && index === 0;\n            return {\n                stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\n                strokePathStyle: {\n                    stroke: !this.isGradient\n                        ? isSuccessPercent\n                            ? statusColorMap.get('success')\n                            : this.nzStrokeColor\n                        : null,\n                    transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n                    strokeDasharray: `${((value || 0) / 100) * (len - gapDegree)}px ${len}px`,\n                    strokeDashoffset: `-${gapDegree / 2}px`\n                }\n            };\n        })\n            .reverse();\n    }\n    setStrokeColor() {\n        const color = this.nzStrokeColor;\n        const isGradient = (this.isGradient = !!color && typeof color !== 'string');\n        if (isGradient && !this.isCircleStyle) {\n            this.lineGradient = handleLinearGradient(color);\n        }\n        else if (isGradient && this.isCircleStyle) {\n            this.circleGradient = handleCircleGradient(this.nzStrokeColor);\n        }\n        else {\n            this.lineGradient = null;\n            this.circleGradient = [];\n        }\n    }\n}\nNzProgressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzProgressComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NzConfigService }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nNzProgressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.11\", type: NzProgressComponent, selector: \"nz-progress\", inputs: { nzShowInfo: \"nzShowInfo\", nzWidth: \"nzWidth\", nzStrokeColor: \"nzStrokeColor\", nzSize: \"nzSize\", nzFormat: \"nzFormat\", nzSuccessPercent: \"nzSuccessPercent\", nzPercent: \"nzPercent\", nzStrokeWidth: \"nzStrokeWidth\", nzGapDegree: \"nzGapDegree\", nzStatus: \"nzStatus\", nzType: \"nzType\", nzGapPosition: \"nzGapPosition\", nzStrokeLinecap: \"nzStrokeLinecap\", nzSteps: \"nzSteps\" }, exportAs: [\"nzProgress\"], usesOnChanges: true, ngImport: i0, template: `\n    <ng-template #progressInfoTemplate>\n      <span class=\"ant-progress-text\" *ngIf=\"nzShowInfo\">\n        <ng-container *ngIf=\"(status === 'exception' || status === 'success') && !nzFormat; else formatTemplate\">\n          <i nz-icon [nzType]=\"icon\"></i>\n        </ng-container>\n        <ng-template #formatTemplate>\n          <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }; let formatter\">\n            {{ formatter(nzPercent) }}\n          </ng-container>\n        </ng-template>\n      </span>\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType === 'line'\"\n      [class.ant-progress-small]=\"nzSize === 'small'\"\n      [class.ant-progress-default]=\"nzSize === 'default'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n      [class.ant-progress-rtl]=\"dir === 'rtl'\"\n    >\n      <!-- line progress -->\n      <div *ngIf=\"nzType === 'line'\">\n        <!-- normal line style -->\n        <ng-container *ngIf=\"!isSteps\">\n          <div class=\"ant-progress-outer\" *ngIf=\"!isSteps\">\n            <div class=\"ant-progress-inner\">\n              <div\n                class=\"ant-progress-bg\"\n                [style.width.%]=\"nzPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                [style.background-image]=\"isGradient ? lineGradient : null\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n              <div\n                *ngIf=\"nzSuccessPercent || nzSuccessPercent === 0\"\n                class=\"ant-progress-success-bg\"\n                [style.width.%]=\"nzSuccessPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n            </div>\n          </div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </ng-container>\n        <!-- step style -->\n        <div class=\"ant-progress-steps-outer\" *ngIf=\"isSteps\">\n          <div *ngFor=\"let step of steps; let i = index\" class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </div>\n      </div>\n\n      <!-- circle / dashboard progress -->\n      <div\n        [style.width.px]=\"this.nzWidth\"\n        [style.height.px]=\"this.nzWidth\"\n        [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n        class=\"ant-progress-inner\"\n        [class.ant-progress-circle-gradient]=\"isGradient\"\n        *ngIf=\"isCircleStyle\"\n      >\n        <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n          <defs *ngIf=\"isGradient\">\n            <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n              <stop *ngFor=\"let i of circleGradient\" [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n            </linearGradient>\n          </defs>\n          <path\n            class=\"ant-progress-circle-trail\"\n            stroke=\"#f3f3f3\"\n            fill-opacity=\"0\"\n            [attr.stroke-width]=\"strokeWidth\"\n            [attr.d]=\"pathString\"\n            [ngStyle]=\"trailPathStyle\"\n          ></path>\n          <path\n            *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\n            class=\"ant-progress-circle-path\"\n            fill-opacity=\"0\"\n            [attr.d]=\"pathString\"\n            [attr.stroke-linecap]=\"nzStrokeLinecap\"\n            [attr.stroke]=\"p.stroke\"\n            [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n            [ngStyle]=\"p.strokePathStyle\"\n          ></path>\n        </svg>\n        <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n      </div>\n    </div>\n  `, isInline: true, directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.NzIconDirective, selector: \"[nz-icon]\", inputs: [\"nzSpin\", \"nzRotate\", \"nzType\", \"nzTheme\", \"nzTwotoneColor\", \"nzIconfont\"], exportAs: [\"nzIcon\"] }, { type: i5.NzStringTemplateOutletDirective, selector: \"[nzStringTemplateOutlet]\", inputs: [\"nzStringTemplateOutletContext\", \"nzStringTemplateOutlet\"], exportAs: [\"nzStringTemplateOutlet\"] }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzShowInfo\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzStrokeColor\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzSize\", void 0);\n__decorate([\n    InputNumber()\n], NzProgressComponent.prototype, \"nzSuccessPercent\", void 0);\n__decorate([\n    InputNumber()\n], NzProgressComponent.prototype, \"nzPercent\", void 0);\n__decorate([\n    WithConfig(),\n    InputNumber()\n], NzProgressComponent.prototype, \"nzStrokeWidth\", void 0);\n__decorate([\n    WithConfig(),\n    InputNumber()\n], NzProgressComponent.prototype, \"nzGapDegree\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzGapPosition\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzStrokeLinecap\", void 0);\n__decorate([\n    InputNumber()\n], NzProgressComponent.prototype, \"nzSteps\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzProgressComponent, decorators: [{\n            type: Component,\n            args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    selector: 'nz-progress',\n                    exportAs: 'nzProgress',\n                    preserveWhitespaces: false,\n                    template: `\n    <ng-template #progressInfoTemplate>\n      <span class=\"ant-progress-text\" *ngIf=\"nzShowInfo\">\n        <ng-container *ngIf=\"(status === 'exception' || status === 'success') && !nzFormat; else formatTemplate\">\n          <i nz-icon [nzType]=\"icon\"></i>\n        </ng-container>\n        <ng-template #formatTemplate>\n          <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }; let formatter\">\n            {{ formatter(nzPercent) }}\n          </ng-container>\n        </ng-template>\n      </span>\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType === 'line'\"\n      [class.ant-progress-small]=\"nzSize === 'small'\"\n      [class.ant-progress-default]=\"nzSize === 'default'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n      [class.ant-progress-rtl]=\"dir === 'rtl'\"\n    >\n      <!-- line progress -->\n      <div *ngIf=\"nzType === 'line'\">\n        <!-- normal line style -->\n        <ng-container *ngIf=\"!isSteps\">\n          <div class=\"ant-progress-outer\" *ngIf=\"!isSteps\">\n            <div class=\"ant-progress-inner\">\n              <div\n                class=\"ant-progress-bg\"\n                [style.width.%]=\"nzPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                [style.background-image]=\"isGradient ? lineGradient : null\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n              <div\n                *ngIf=\"nzSuccessPercent || nzSuccessPercent === 0\"\n                class=\"ant-progress-success-bg\"\n                [style.width.%]=\"nzSuccessPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n            </div>\n          </div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </ng-container>\n        <!-- step style -->\n        <div class=\"ant-progress-steps-outer\" *ngIf=\"isSteps\">\n          <div *ngFor=\"let step of steps; let i = index\" class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </div>\n      </div>\n\n      <!-- circle / dashboard progress -->\n      <div\n        [style.width.px]=\"this.nzWidth\"\n        [style.height.px]=\"this.nzWidth\"\n        [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n        class=\"ant-progress-inner\"\n        [class.ant-progress-circle-gradient]=\"isGradient\"\n        *ngIf=\"isCircleStyle\"\n      >\n        <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n          <defs *ngIf=\"isGradient\">\n            <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n              <stop *ngFor=\"let i of circleGradient\" [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n            </linearGradient>\n          </defs>\n          <path\n            class=\"ant-progress-circle-trail\"\n            stroke=\"#f3f3f3\"\n            fill-opacity=\"0\"\n            [attr.stroke-width]=\"strokeWidth\"\n            [attr.d]=\"pathString\"\n            [ngStyle]=\"trailPathStyle\"\n          ></path>\n          <path\n            *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\n            class=\"ant-progress-circle-path\"\n            fill-opacity=\"0\"\n            [attr.d]=\"pathString\"\n            [attr.stroke-linecap]=\"nzStrokeLinecap\"\n            [attr.stroke]=\"p.stroke\"\n            [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n            [ngStyle]=\"p.strokePathStyle\"\n          ></path>\n        </svg>\n        <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n      </div>\n    </div>\n  `\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: i1.NzConfigService }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { nzShowInfo: [{\n                type: Input\n            }], nzWidth: [{\n                type: Input\n            }], nzStrokeColor: [{\n                type: Input\n            }], nzSize: [{\n                type: Input\n            }], nzFormat: [{\n                type: Input\n            }], nzSuccessPercent: [{\n                type: Input\n            }], nzPercent: [{\n                type: Input\n            }], nzStrokeWidth: [{\n                type: Input\n            }], nzGapDegree: [{\n                type: Input\n            }], nzStatus: [{\n                type: Input\n            }], nzType: [{\n                type: Input\n            }], nzGapPosition: [{\n                type: Input\n            }], nzStrokeLinecap: [{\n                type: Input\n            }], nzSteps: [{\n                type: Input\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzProgressModule {\n}\nNzProgressModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNzProgressModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzProgressModule, declarations: [NzProgressComponent], imports: [BidiModule, CommonModule, NzIconModule, NzOutletModule], exports: [NzProgressComponent] });\nNzProgressModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzProgressModule, imports: [[BidiModule, CommonModule, NzIconModule, NzOutletModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzProgressModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [NzProgressComponent],\n                    declarations: [NzProgressComponent],\n                    imports: [BidiModule, CommonModule, NzIconModule, NzOutletModule]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzProgressComponent, NzProgressModule };\n"]},"metadata":{},"sourceType":"module"}