{"ast":null,"code":"import { Platform, PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nclass NzWaveRenderer {\n  constructor(triggerElement, ngZone, insertExtraNode, platformId) {\n    this.triggerElement = triggerElement;\n    this.ngZone = ngZone;\n    this.insertExtraNode = insertExtraNode;\n    this.platformId = platformId;\n    this.waveTransitionDuration = 400;\n    this.styleForPseudo = null;\n    this.extraNode = null;\n    this.lastTime = 0;\n\n    this.onClick = event => {\n      if (!this.triggerElement || !this.triggerElement.getAttribute || this.triggerElement.getAttribute('disabled') || event.target.tagName === 'INPUT' || this.triggerElement.className.indexOf('disabled') >= 0) {\n        return;\n      }\n\n      this.fadeOutWave();\n    };\n\n    this.platform = new Platform(this.platformId);\n    this.clickHandler = this.onClick.bind(this);\n    this.bindTriggerEvent();\n  }\n\n  get waveAttributeName() {\n    return this.insertExtraNode ? 'ant-click-animating' : 'ant-click-animating-without-extra-node';\n  }\n\n  bindTriggerEvent() {\n    if (this.platform.isBrowser) {\n      this.ngZone.runOutsideAngular(() => {\n        this.removeTriggerEvent();\n\n        if (this.triggerElement) {\n          this.triggerElement.addEventListener('click', this.clickHandler, true);\n        }\n      });\n    }\n  }\n\n  removeTriggerEvent() {\n    if (this.triggerElement) {\n      this.triggerElement.removeEventListener('click', this.clickHandler, true);\n    }\n  }\n\n  removeStyleAndExtraNode() {\n    if (this.styleForPseudo && document.body.contains(this.styleForPseudo)) {\n      document.body.removeChild(this.styleForPseudo);\n      this.styleForPseudo = null;\n    }\n\n    if (this.insertExtraNode && this.triggerElement.contains(this.extraNode)) {\n      this.triggerElement.removeChild(this.extraNode);\n    }\n  }\n\n  destroy() {\n    this.removeTriggerEvent();\n    this.removeStyleAndExtraNode();\n  }\n\n  fadeOutWave() {\n    const node = this.triggerElement;\n    const waveColor = this.getWaveColor(node);\n    node.setAttribute(this.waveAttributeName, 'true');\n\n    if (Date.now() < this.lastTime + this.waveTransitionDuration) {\n      return;\n    }\n\n    if (this.isValidColor(waveColor)) {\n      if (!this.styleForPseudo) {\n        this.styleForPseudo = document.createElement('style');\n      }\n\n      this.styleForPseudo.innerHTML = `\n      [ant-click-animating-without-extra-node='true']::after, .ant-click-animating-node {\n        --antd-wave-shadow-color: ${waveColor};\n      }`;\n      document.body.appendChild(this.styleForPseudo);\n    }\n\n    if (this.insertExtraNode) {\n      if (!this.extraNode) {\n        this.extraNode = document.createElement('div');\n      }\n\n      this.extraNode.className = 'ant-click-animating-node';\n      node.appendChild(this.extraNode);\n    }\n\n    this.lastTime = Date.now();\n    this.runTimeoutOutsideZone(() => {\n      node.removeAttribute(this.waveAttributeName);\n      this.removeStyleAndExtraNode();\n    }, this.waveTransitionDuration);\n  }\n\n  isValidColor(color) {\n    return !!color && color !== '#ffffff' && color !== 'rgb(255, 255, 255)' && this.isNotGrey(color) && !/rgba\\(\\d*, \\d*, \\d*, 0\\)/.test(color) && color !== 'transparent';\n  }\n\n  isNotGrey(color) {\n    const match = color.match(/rgba?\\((\\d*), (\\d*), (\\d*)(, [\\.\\d]*)?\\)/);\n\n    if (match && match[1] && match[2] && match[3]) {\n      return !(match[1] === match[2] && match[2] === match[3]);\n    }\n\n    return true;\n  }\n\n  getWaveColor(node) {\n    const nodeStyle = getComputedStyle(node);\n    return nodeStyle.getPropertyValue('border-top-color') || // Firefox Compatible\n    nodeStyle.getPropertyValue('border-color') || nodeStyle.getPropertyValue('background-color');\n  }\n\n  runTimeoutOutsideZone(fn, delay) {\n    this.ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nconst NZ_WAVE_GLOBAL_DEFAULT_CONFIG = {\n  disabled: false\n};\nconst NZ_WAVE_GLOBAL_CONFIG = new InjectionToken('nz-wave-global-options', {\n  providedIn: 'root',\n  factory: NZ_WAVE_GLOBAL_CONFIG_FACTORY\n});\n\nfunction NZ_WAVE_GLOBAL_CONFIG_FACTORY() {\n  return NZ_WAVE_GLOBAL_DEFAULT_CONFIG;\n}\n\nclass NzWaveDirective {\n  constructor(ngZone, elementRef, config, animationType, platformId) {\n    this.ngZone = ngZone;\n    this.elementRef = elementRef;\n    this.config = config;\n    this.animationType = animationType;\n    this.platformId = platformId;\n    this.nzWaveExtraNode = false;\n    this.waveDisabled = false;\n    this.waveDisabled = this.isConfigDisabled();\n  }\n\n  get disabled() {\n    return this.waveDisabled;\n  }\n\n  get rendererRef() {\n    return this.waveRenderer;\n  }\n\n  isConfigDisabled() {\n    let disabled = false;\n\n    if (this.config && typeof this.config.disabled === 'boolean') {\n      disabled = this.config.disabled;\n    }\n\n    if (this.animationType === 'NoopAnimations') {\n      disabled = true;\n    }\n\n    return disabled;\n  }\n\n  ngOnDestroy() {\n    if (this.waveRenderer) {\n      this.waveRenderer.destroy();\n    }\n  }\n\n  ngOnInit() {\n    this.renderWaveIfEnabled();\n  }\n\n  renderWaveIfEnabled() {\n    if (!this.waveDisabled && this.elementRef.nativeElement) {\n      this.waveRenderer = new NzWaveRenderer(this.elementRef.nativeElement, this.ngZone, this.nzWaveExtraNode, this.platformId);\n    }\n  }\n\n  disable() {\n    this.waveDisabled = true;\n\n    if (this.waveRenderer) {\n      this.waveRenderer.removeTriggerEvent();\n      this.waveRenderer.removeStyleAndExtraNode();\n    }\n  }\n\n  enable() {\n    // config priority\n    this.waveDisabled = this.isConfigDisabled() || false;\n\n    if (this.waveRenderer) {\n      this.waveRenderer.bindTriggerEvent();\n    }\n  }\n\n}\n\nNzWaveDirective.ɵfac = function NzWaveDirective_Factory(t) {\n  return new (t || NzWaveDirective)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NZ_WAVE_GLOBAL_CONFIG, 8), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nNzWaveDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NzWaveDirective,\n  selectors: [[\"\", \"nz-wave\", \"\"], [\"button\", \"nz-button\", \"\", 3, \"nzType\", \"link\", 3, \"nzType\", \"text\"]],\n  inputs: {\n    nzWaveExtraNode: \"nzWaveExtraNode\"\n  },\n  exportAs: [\"nzWave\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzWaveDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nz-wave],button[nz-button]:not([nzType=\"link\"]):not([nzType=\"text\"])',\n      exportAs: 'nzWave'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NZ_WAVE_GLOBAL_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    nzWaveExtraNode: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nclass NzWaveModule {}\n\nNzWaveModule.ɵfac = function NzWaveModule_Factory(t) {\n  return new (t || NzWaveModule)();\n};\n\nNzWaveModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NzWaveModule\n});\nNzWaveModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[PlatformModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzWaveModule, [{\n    type: NgModule,\n    args: [{\n      imports: [PlatformModule],\n      exports: [NzWaveDirective],\n      declarations: [NzWaveDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NZ_WAVE_GLOBAL_CONFIG, NZ_WAVE_GLOBAL_CONFIG_FACTORY, NZ_WAVE_GLOBAL_DEFAULT_CONFIG, NzWaveDirective, NzWaveModule, NzWaveRenderer };","map":{"version":3,"sources":["/home/ofgha/Documents/PL2/front-end/node_modules/ng-zorro-antd/fesm2015/ng-zorro-antd-core-wave.mjs"],"names":["Platform","PlatformModule","i0","InjectionToken","PLATFORM_ID","Directive","Optional","Inject","Input","NgModule","ANIMATION_MODULE_TYPE","NzWaveRenderer","constructor","triggerElement","ngZone","insertExtraNode","platformId","waveTransitionDuration","styleForPseudo","extraNode","lastTime","onClick","event","getAttribute","target","tagName","className","indexOf","fadeOutWave","platform","clickHandler","bind","bindTriggerEvent","waveAttributeName","isBrowser","runOutsideAngular","removeTriggerEvent","addEventListener","removeEventListener","removeStyleAndExtraNode","document","body","contains","removeChild","destroy","node","waveColor","getWaveColor","setAttribute","Date","now","isValidColor","createElement","innerHTML","appendChild","runTimeoutOutsideZone","removeAttribute","color","isNotGrey","test","match","nodeStyle","getComputedStyle","getPropertyValue","fn","delay","setTimeout","NZ_WAVE_GLOBAL_DEFAULT_CONFIG","disabled","NZ_WAVE_GLOBAL_CONFIG","providedIn","factory","NZ_WAVE_GLOBAL_CONFIG_FACTORY","NzWaveDirective","elementRef","config","animationType","nzWaveExtraNode","waveDisabled","isConfigDisabled","rendererRef","waveRenderer","ngOnDestroy","ngOnInit","renderWaveIfEnabled","nativeElement","disable","enable","ɵfac","NgZone","ElementRef","ɵdir","type","args","selector","exportAs","undefined","decorators","NzWaveModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import { Platform, PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzWaveRenderer {\n    constructor(triggerElement, ngZone, insertExtraNode, platformId) {\n        this.triggerElement = triggerElement;\n        this.ngZone = ngZone;\n        this.insertExtraNode = insertExtraNode;\n        this.platformId = platformId;\n        this.waveTransitionDuration = 400;\n        this.styleForPseudo = null;\n        this.extraNode = null;\n        this.lastTime = 0;\n        this.onClick = (event) => {\n            if (!this.triggerElement ||\n                !this.triggerElement.getAttribute ||\n                this.triggerElement.getAttribute('disabled') ||\n                event.target.tagName === 'INPUT' ||\n                this.triggerElement.className.indexOf('disabled') >= 0) {\n                return;\n            }\n            this.fadeOutWave();\n        };\n        this.platform = new Platform(this.platformId);\n        this.clickHandler = this.onClick.bind(this);\n        this.bindTriggerEvent();\n    }\n    get waveAttributeName() {\n        return this.insertExtraNode ? 'ant-click-animating' : 'ant-click-animating-without-extra-node';\n    }\n    bindTriggerEvent() {\n        if (this.platform.isBrowser) {\n            this.ngZone.runOutsideAngular(() => {\n                this.removeTriggerEvent();\n                if (this.triggerElement) {\n                    this.triggerElement.addEventListener('click', this.clickHandler, true);\n                }\n            });\n        }\n    }\n    removeTriggerEvent() {\n        if (this.triggerElement) {\n            this.triggerElement.removeEventListener('click', this.clickHandler, true);\n        }\n    }\n    removeStyleAndExtraNode() {\n        if (this.styleForPseudo && document.body.contains(this.styleForPseudo)) {\n            document.body.removeChild(this.styleForPseudo);\n            this.styleForPseudo = null;\n        }\n        if (this.insertExtraNode && this.triggerElement.contains(this.extraNode)) {\n            this.triggerElement.removeChild(this.extraNode);\n        }\n    }\n    destroy() {\n        this.removeTriggerEvent();\n        this.removeStyleAndExtraNode();\n    }\n    fadeOutWave() {\n        const node = this.triggerElement;\n        const waveColor = this.getWaveColor(node);\n        node.setAttribute(this.waveAttributeName, 'true');\n        if (Date.now() < this.lastTime + this.waveTransitionDuration) {\n            return;\n        }\n        if (this.isValidColor(waveColor)) {\n            if (!this.styleForPseudo) {\n                this.styleForPseudo = document.createElement('style');\n            }\n            this.styleForPseudo.innerHTML = `\n      [ant-click-animating-without-extra-node='true']::after, .ant-click-animating-node {\n        --antd-wave-shadow-color: ${waveColor};\n      }`;\n            document.body.appendChild(this.styleForPseudo);\n        }\n        if (this.insertExtraNode) {\n            if (!this.extraNode) {\n                this.extraNode = document.createElement('div');\n            }\n            this.extraNode.className = 'ant-click-animating-node';\n            node.appendChild(this.extraNode);\n        }\n        this.lastTime = Date.now();\n        this.runTimeoutOutsideZone(() => {\n            node.removeAttribute(this.waveAttributeName);\n            this.removeStyleAndExtraNode();\n        }, this.waveTransitionDuration);\n    }\n    isValidColor(color) {\n        return (!!color &&\n            color !== '#ffffff' &&\n            color !== 'rgb(255, 255, 255)' &&\n            this.isNotGrey(color) &&\n            !/rgba\\(\\d*, \\d*, \\d*, 0\\)/.test(color) &&\n            color !== 'transparent');\n    }\n    isNotGrey(color) {\n        const match = color.match(/rgba?\\((\\d*), (\\d*), (\\d*)(, [\\.\\d]*)?\\)/);\n        if (match && match[1] && match[2] && match[3]) {\n            return !(match[1] === match[2] && match[2] === match[3]);\n        }\n        return true;\n    }\n    getWaveColor(node) {\n        const nodeStyle = getComputedStyle(node);\n        return (nodeStyle.getPropertyValue('border-top-color') || // Firefox Compatible\n            nodeStyle.getPropertyValue('border-color') ||\n            nodeStyle.getPropertyValue('background-color'));\n    }\n    runTimeoutOutsideZone(fn, delay) {\n        this.ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n    }\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst NZ_WAVE_GLOBAL_DEFAULT_CONFIG = {\n    disabled: false\n};\nconst NZ_WAVE_GLOBAL_CONFIG = new InjectionToken('nz-wave-global-options', {\n    providedIn: 'root',\n    factory: NZ_WAVE_GLOBAL_CONFIG_FACTORY\n});\nfunction NZ_WAVE_GLOBAL_CONFIG_FACTORY() {\n    return NZ_WAVE_GLOBAL_DEFAULT_CONFIG;\n}\nclass NzWaveDirective {\n    constructor(ngZone, elementRef, config, animationType, platformId) {\n        this.ngZone = ngZone;\n        this.elementRef = elementRef;\n        this.config = config;\n        this.animationType = animationType;\n        this.platformId = platformId;\n        this.nzWaveExtraNode = false;\n        this.waveDisabled = false;\n        this.waveDisabled = this.isConfigDisabled();\n    }\n    get disabled() {\n        return this.waveDisabled;\n    }\n    get rendererRef() {\n        return this.waveRenderer;\n    }\n    isConfigDisabled() {\n        let disabled = false;\n        if (this.config && typeof this.config.disabled === 'boolean') {\n            disabled = this.config.disabled;\n        }\n        if (this.animationType === 'NoopAnimations') {\n            disabled = true;\n        }\n        return disabled;\n    }\n    ngOnDestroy() {\n        if (this.waveRenderer) {\n            this.waveRenderer.destroy();\n        }\n    }\n    ngOnInit() {\n        this.renderWaveIfEnabled();\n    }\n    renderWaveIfEnabled() {\n        if (!this.waveDisabled && this.elementRef.nativeElement) {\n            this.waveRenderer = new NzWaveRenderer(this.elementRef.nativeElement, this.ngZone, this.nzWaveExtraNode, this.platformId);\n        }\n    }\n    disable() {\n        this.waveDisabled = true;\n        if (this.waveRenderer) {\n            this.waveRenderer.removeTriggerEvent();\n            this.waveRenderer.removeStyleAndExtraNode();\n        }\n    }\n    enable() {\n        // config priority\n        this.waveDisabled = this.isConfigDisabled() || false;\n        if (this.waveRenderer) {\n            this.waveRenderer.bindTriggerEvent();\n        }\n    }\n}\nNzWaveDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzWaveDirective, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: NZ_WAVE_GLOBAL_CONFIG, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });\nNzWaveDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.11\", type: NzWaveDirective, selector: \"[nz-wave],button[nz-button]:not([nzType=\\\"link\\\"]):not([nzType=\\\"text\\\"])\", inputs: { nzWaveExtraNode: \"nzWaveExtraNode\" }, exportAs: [\"nzWave\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzWaveDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[nz-wave],button[nz-button]:not([nzType=\"link\"]):not([nzType=\"text\"])',\n                    exportAs: 'nzWave'\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [NZ_WAVE_GLOBAL_CONFIG]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { nzWaveExtraNode: [{\n                type: Input\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzWaveModule {\n}\nNzWaveModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzWaveModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNzWaveModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzWaveModule, declarations: [NzWaveDirective], imports: [PlatformModule], exports: [NzWaveDirective] });\nNzWaveModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzWaveModule, imports: [[PlatformModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NzWaveModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [PlatformModule],\n                    exports: [NzWaveDirective],\n                    declarations: [NzWaveDirective]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NZ_WAVE_GLOBAL_CONFIG, NZ_WAVE_GLOBAL_CONFIG_FACTORY, NZ_WAVE_GLOBAL_DEFAULT_CONFIG, NzWaveDirective, NzWaveModule, NzWaveRenderer };\n"]},"metadata":{},"sourceType":"module"}